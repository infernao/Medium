// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
//configures the generator for the Prisma Client, which will be used in your application code to interact with the database. The generator creates a client that allows you to read and write to the database using JavaScript or TypeScript.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid()) //id field is defined as a string, and it is the primary key (@id). It will be automatically generated using a UUID (@default(uuid())), ensuring that each user has a unique identifier
  email    String   @unique
  name     String?
  password String
  posts    Post[] //posts field is an array of Post objects, representing the posts authored by this user. This establishes a one-to-many relationship between User and Post, where one user can have many posts.
}

model Post { //Post model, which represents a blog post or article in the database.
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String //stores the ID of the user who authored the post. This field is used to link the Post to the User through the relationship defined earlier
}
//author field establishes a relationship between the Post and User models. It indicates that each post has an author, and the authorId field in the Post model will store the reference to the id field of the User model. This creates a foreign key relationship
//This code defines two models, User and Post, with a one-to-many relationship between them.
//A user can have multiple posts, and each post has one author (a user).
//What does prisma migrate do?
//The migration process in Prisma helps you keep your database schema synchronized with your Prisma schema by generating and applying SQL statements that modify your database structure accordingly.
//migrations are a way to manage changes to your database schema over time. When you update your Prisma schema (defined in the schema.prisma file), you will need to run a migration to apply those changes to your actual database